plugins {
    id 'com.android.application'
}

apply plugin: 'com.github.dcendents.android-maven'
group = 'com.github.yuhaibing'
//apply plugin: 'com.example.plugintest'
////apply plugin: 'com.yuhb.plugin'
//apply plugin: 'com.yuhb.upload'

//versionInfo {
//    versionName = '1.0.0'
//    versionCode = 1
//    versionUpdateInfo = '当前是第一个版本：初始apk'
//}
//
//
//ReleaseInfo {
//    versionCode = 1
//    versionName = '1.0.0'
//    versionInfo = "12345566版本发布"
//    fileName = "releaseinfo.xml"
//}
//HelloPluginExt {
//    name = 'yuhaibing'
//    age = '12'
//}
import java.text.SimpleDateFormat
apply from: file('../releaseInfo.gradle')

//sourceSet {
//
//}
android {
    resourcePrefix '_mysource_'

    sourceSets {
        main {
//            jniLibs.srcDirs
        }
    }
    compileSdk this.mCompileSdk

    defaultConfig {
        applicationId "com.example.apptest"
        minSdk 19
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {

    implementation 'androidx.appcompat:appcompat:1.2.0'
        //排除依赖：exclude
//        exclude module:'support-v4'
        //传递依赖：transitive  A->B->C   如果是false：则A不会依赖C，如果是true，则A会直接依赖C
//        transitive false
    //compileOnly :占位编译，编译阶段其作用，不会打包到输出文件中、用于已经有module引入了库，可以使用占位编译

    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
//    compile gradleApi()
//    compile 'com.android.tools.build:gradle:4.1.1'
}


//文件遍历
fileTree('build/outputs/apk/'){ FileTree fileTree ->
    fileTree.visit { FileTreeElement element ->
//        println 'the file name is'+element.file.name
        copy {
            from element.file
            into getRootProject().getBuildDir().path+'/test/'
        }
    }
}

//外部命令执行
task('apkCopy') {
//    doLast {
//        println this.buildDir.path
//        def srcPath = this.buildDir.path
//        def desPath = 'E:\\360downloads'
//        def command = "mv -f $srcPath $desPath"
//        exec {
//            try {
//                executable 'bash'
//                args '-c', command
//                println 'this command is execute success'
//            }catch(GradleException e){
//                println 'this command is execute fail'
//            }
//            return
//        }
//    }
}

this.afterEvaluate { Project project ->
    getBuildTime()
}

//获取build时间
def getBuildTime(){
    def startTime,endTime
    def preBuildTask = tasks.getByName('preBuild')
    preBuildTask.doFirst {
        startTime = System.currentTimeMillis()
        println "the build start time is "+startTime
    }
    def buildTask = tasks.getByName('build')
    buildTask.doLast {
        endTime = System.currentTimeMillis()
        println "the build end time is "+endTime
        println "the build time is ${endTime-startTime} "
        writeBuildTimeFile(startTime,endTime)
    }
}
def writeBuildTimeFile(startTime,endTime){
    def start = formatTime(startTime)
    def end = formatTime(endTime)
    def build = formatTime(endTime - startTime)
    def desFile = new File('../buildTime.imi')
    if(!desFile.exists()){
        desFile.createNewFile()
    }
    desFile.withWriterAppend {
        it.write("buildStart:$start"+"\r\n"+"buildEnd:$end"+"\r\n"+"buildLong:$build"+"\r\n")
    }
}

def formatTime(time){
    SimpleDateFormat format = new SimpleDateFormat('yyyy-MM-dd HH:mm:ss')
    return format.format(time)
}
//使用TasContainer创建TASK
this.tasks.create('hellotask2'){
//    println 'this is hellotask2'
}

//创建TASK：指定参数如group,description
task helloTask3(group: 'com.yuhb',description: 'this is yuhb task3') {
//    println 'this is helloTask3'
//    helloTask3.e
}

//使用TasContainer创建TASK,并添加参数
this.tasks.create('hellotask4'){
//    println 'this is hellotask4'
    group 'con.yuhb'
    description 'this is a hellotask4'
}
task taskB {
    doLast {
        println 'this is taskB'
    }
}
task taskA {
    doLast {
        println 'this is taskA'
    }
}


task lib1 {
    doLast {
        println 'this is lib1'
    }
}
task lib2 {
    doLast {
        println 'this is lib2'
    }
}

//task添加依赖关系，强依赖
task taskC(dependsOn: [taskA,taskB]) {
    dependsOn this.tasks.findAll {task ->
        return task.name.startsWith('lib')
    }
    doLast{
        println 'this is taskC'
    }
}

task nolib{
    doLast {
        println 'this is nolib'
    }
}

/**
 * 测试文件读写依赖关系
 * **/
task handleReleaseFile {
    def srcFile = file('releases.xml')
    def desFileDir = new File('build/releases')
    doLast {
        println '开始解析文件'
        desFileDir.mkdir()
        def releases = new XmlParser().parse(srcFile)
        releases.release.each { releaseNode ->
            def name = releaseNode.versionName.text()
            def code = releaseNode.versionCode.text()
            def info = releaseNode.versionInfo.text()
            println "this name is $name ,code is $code ,info is $info"
            File desfile = new File(desFileDir,"release-${name}.xml")
            if(!desfile.exists()){
                desfile.createNewFile()
            }
            desfile.withWriter {
                it.write("name->$name"+"code->$code"+"info->$info")
            }
            println '解析完成'
        }
    }
}

task handleReleaseFileTest {
    dependsOn 'handleReleaseFile'
    def dir = fileTree('build/releases')
    doLast {
        dir.each {
            println "the file name is $it"
        }
        println "输出完成"
    }
}









